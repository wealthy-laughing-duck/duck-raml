#%RAML 0.8
---
#===============================================================
#  Products API - RAML example
#  References:
#    - RAML Specification - http://raml.org/spec.html
#    - RAML Projects - http://raml.org/projects.html
#    - RAML Tools  - http://www.apihub.com/raml-tools
#===============================================================
title: Wealthy Laughing Duck API
mediaType:  application/json

documentation:
  - title: Wealthy Laughing Duck
    content: |
      This is a workshop project
  - title: Technologies used
    content: |
      The aim is to provide consistent API for different SPA implementations, such as Backbone, Angular & React
                                  
/users:
  displayName: Users
  description: |
    A collection of users
  get:
    description: |
      Fetch list of all users
    responses:
      200:
        body:
          application/json:
            example: !include samples/users.json
            schema: !include schemas/user-collection.json
  /{id}:
    uriParameters:
      id:
        displayName: User ID
        type: integer
    get:
      description: |
        Fetch a single users by `id`
      responses:
        200:
          body:
            application/json:
              example: !include samples/users/_id_.json
              schema: !include schemas/user-item.json

/categories:
  displayName: Categories
  description: |
    Categories of incomes and outcomes used throughout the system
  /incomes:
    get:
      description: |
        Fetch list of all income categories
      responses:
        200:
          body:
            application/json:
              example: !include samples/categories/incomes.json
              schema: !include schemas/category-collection.json
    /{id}:
      uriParameters:
        id:
          displayName: Income Category ID
          type: integer
      get:
        description: |
          Fetch a single income category by `id`
        responses:
          200:
            body:
              application/json:
                example: !include samples/categories/incomes/_id_.json
                schema: !include schemas/category-item.json
  /outcomes:
    get:
      description: |
        Fetch list of all outcome categories
      responses:
        200:
          body:
            application/json:
              example: !include samples/categories/incomes.json
              schema: !include schemas/category-collection.json
    /{id}:
      uriParameters:
        id:
          displayName: Outcome Category ID
          type: integer
      get:
        description: |
          Fetch a single income category by `id`
        responses:
          200:
            body:
              application/json:
                example: !include samples/categories/incomes/_id_.json
                schema: !include schemas/category-item.json

/incomes:
  displayName: Incomes
  description: |
    A collection of incomes (money earned)
  get:
    description: |
      Fetch list of all incomes (might be very long)
    responses:
      200:
        body:
          application/json:
            example: !include samples/incomes.json
            schema: !include schemas/income-collection.json
  post:
    description: Create an income
    body:
      application/json:
        example: !include samples/incomes/_id_.json
        schema: !include schemas/income-item.json
  /{id}:
    uriParameters:
      id:
        displayName: Income ID
        type: integer
    get:
      description: |
        Fetch a single income by `id`
      responses:
        200:
          body:
            application/json:
              example: !include samples/incomes/_id_.json
              schema: !include schemas/income-item.json
    put:
      description: Update a single income by `id`
      body:
        application/json:
          example: !include samples/incomes/_id_.json
          schema: !include schemas/income-item.json
      responses:
        200:
          body:
            application/json:
              example: !!null
    delete:
      description: Delete a single income by `id`
      responses:
        200:
          body:
            application/json:
              example: !!null

/outcomes:
  displayName: Outcomes
  description: |
    A collection of outcomes (money spent)
  get:
    description: |
      Fetch list of all outcomes (might be very long)
    responses:
      200:
        body:
          application/json:
            example: !include samples/incomes.json
            schema: !include schemas/income-collection.json
  post:
    description: Create an outcome
    body:
      application/json:
        example: !include samples/incomes/_id_.json
        schema: !include schemas/income-item.json
  /{id}:
    uriParameters:
      id:
        displayName: Outcome ID
        type: integer
    get:
      description: |
        Fetch a single outcome by `id`
      responses:
        200:
          body:
            application/json:
              example: !include samples/incomes/_id_.json
              schema: !include schemas/income-item.json
    put:
      description: Update a single outcome by `id`
      body:
        application/json:
          example: !include samples/incomes/_id_.json
          schema: !include schemas/income-item.json
      responses:
        200:
          body:
            application/json:
              example: !!null
    delete:
      description: Delete a single outcome by `id`
      responses:
        200:
          body:
            application/json:
              example: !!null
